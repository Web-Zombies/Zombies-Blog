{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"node\" category",
    "description": "",
    "home_page_url": "http://xchao.work",
    "items": [
        {
            "id": "http://xchao.work/2022/03/31/computer-science2/node/Day1/",
            "url": "http://xchao.work/2022/03/31/computer-science2/node/Day1/",
            "title": "Node内置模块、模块化、npm包发布",
            "date_published": "2022-03-31T02:30:54.202Z",
            "content_html": "<h1 id=\"nodejs\"><a class=\"markdownIt-Anchor\" href=\"#nodejs\">#</a> Node.js</h1>\n<p>node 中文网 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi8=\">http://nodejs.cn/</span></p>\n<h2 id=\"推荐安装以及常用命令\"><a class=\"markdownIt-Anchor\" href=\"#推荐安装以及常用命令\">#</a> 推荐安装以及常用命令</h2>\n<div class=\"note info\">\n<p>node 版本管理 NVM <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZHJlYW1zcWluL3AvMTA4ODUwODIuaHRtbA==\">下载与安装 </span><br>\nnvm ls  查看目前已经安装的版本<br>\n nvm install 10.5.0 安装指定 node 版本<br>\n nvm use 16.13.1 切换 node 版本</p>\n</div>\n<div class=\"note info\">\n<p>npm  镜像管理 NRM <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NGQwODRjZTY4MzQ=\">下载与安装  </span><br>\nnrm ls  查看可选的源<br>\n nrm use taobao 切换 taobao 源<br>\n nrm del <registry> 删除对应的源<br>\n nrm test npm 测试相应源的响应时间</p>\n</div>\n<h2 id=\"终端中的快捷键\"><a class=\"markdownIt-Anchor\" href=\"#终端中的快捷键\">#</a> 终端中的快捷键</h2>\n<ul>\n<li>使用 ↑ 键，可以快速定位到上一次执行的命令</li>\n<li>使用 tab 键，能够快速补全路径</li>\n<li>使用 esc 键，能够快速清空当前已输入的命令</li>\n<li>输入 cls 命令，可以清空终端</li>\n</ul>\n<h1 id=\"内置模块\"><a class=\"markdownIt-Anchor\" href=\"#内置模块\">#</a> 内置模块</h1>\n<h2 id=\"fs-文件系统模块\"><a class=\"markdownIt-Anchor\" href=\"#fs-文件系统模块\">#</a> fs 文件系统模块</h2>\n<p><span class=\"label info\">fs.readFile () 方法</span> <span class=\"grey\">用来读取指定文件中的内容</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 fs 模块，来操作文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 调用 fs.readFile () 方法读取文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    参数 1：读取文件的存放路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    参数 2：读取文件时候采用的编码格式，一般默认指定 utf8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//    参数 3：回调函数，拿到读取失败和成功的结果  err  dataStr</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./files/cs.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> dataStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2.1 打印失败的结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 如果读取成功，则 err 的值为 null</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 如果读取失败，则 err 的值为 错误对象，dataStr 的值为 undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件失败！'</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 2.2 打印成功的结果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件成功！'</span> <span class=\"token operator\">+</span> dataStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span class=\"label info\">fs.writeFile () 方法</span> <span class=\"grey\">用来向指定的文件中写入内容</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 fs 文件系统模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 调用 fs.writeFile () 方法，写入文件的内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    参数 1：表示文件的存放路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    参数 2：表示要写入的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//    参数 3：回调函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./files/3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ok123'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2.1 如果文件写入成功，则 err 的值等于 null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 2.2 如果文件写入失败，则 err 的值等于一个 错误对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// console.log(err)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件写入失败！'</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件写入成功！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"path-路径模块\"><a class=\"markdownIt-Anchor\" href=\"#path-路径模块\">#</a> path 路径模块</h2>\n<p><span class=\"label info\">path.join () 方法</span> <span class=\"grey\">用来将多个路径片段拼接成一个完整的路径字符串</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//__dirname 表示当前文件所处的目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// console.log(__dirname)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 注意：  ../ 会抵消前面的路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// const pathStr = path.join('/a', '/b/c', '../../', './d', 'e')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// console.log(pathStr)  // \\a\\b\\d\\e</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// fs.readFile(__dirname + '/files/1.txt')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./files/cs.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> dataStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dataStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span class=\"label info\">path.basename () 方法</span> <span class=\"grey\">用来从路径字符串中，将文件名解析出来</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义文件的存放路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> fpath <span class=\"token operator\">=</span> <span class=\"token string\">'/a/b/c/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// const fullName = path.basename(fpath)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// console.log(fullName)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回: 'index.html'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> nameWithoutExt <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>fpath<span class=\"token punctuation\">,</span> <span class=\"token string\">'.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nameWithoutExt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 返回: 'index'</span></pre></td></tr></table></figure><p><span class=\"label info\">path.extname () 方法</span> <span class=\"grey\">获取路径中的文件扩展名</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这是文件的存放路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> fpath <span class=\"token operator\">=</span> <span class=\"token string\">'/a/b/c/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> fext <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>fpath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回: '.html'</span></pre></td></tr></table></figure><h2 id=\"http-模块\"><a class=\"markdownIt-Anchor\" href=\"#http-模块\">#</a> http 模块</h2>\n<p><span class=\"label info\">http.createServer () 方法</span><br>\n<span class=\"grey\">创建 web 服务器的基本步骤</span></p>\n<ol>\n<li>导入 http 模块</li>\n<li>创建 web 服务器实例</li>\n<li>为服务器实例绑定 request 事件，监听客户端的请求</li>\n<li>启动服务器</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 创建 web 服务器实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 为服务器实例绑定 request 事件，监听客户端的请求</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//req.url 是客户端请求的 URL 地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//req.method 是客户端请求的 method 类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>method</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 定义一个字符串，包含中文的内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">您请求的 URL 地址是 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">，请求的 method 类型为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>method<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 调用 res.setHeader () 方法，设置 Content-Type 响应头，解决中文乱码的问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/html; charset=utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//res.end () 将内容响应给客户端</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 4. 启动服务器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server running at http://127.0.0.1:8080'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"模块化的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#模块化的基本概念\">#</a> 模块化的基本概念</h1>\n<p><span class=\"grey\">把代码进行模块化拆分的好处</span></p>\n<ol>\n<li>\n<p>提高了代码的复用性</p>\n</li>\n<li>\n<p>提高了代码的可维护性</p>\n</li>\n<li>\n<p>可以实现按需加载</p>\n</li>\n</ol>\n<p><span class=\"grey\">Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是</span></p>\n<ul>\n<li>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</li>\n<li>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</li>\n<li>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</li>\n</ul>\n<p><ins>使用强大的 require () 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用</ins><br>\n<span class=\"label danger\">注意</span> 使用 require () 方法加载其它模块时，会执行被加载模块中的代码。</p>\n<h2 id=\"模块的加载机制\"><a class=\"markdownIt-Anchor\" href=\"#模块的加载机制\">#</a> 模块的加载机制</h2>\n<p><ins>模块在第一次加载后会被缓存。</ins></p>\n<p>这也意味着多次调用 require () 不会导致模块的代码被执行多次。 注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p>\n<p><ins>内置模块的加载优先级最高。</ins></p>\n<p>自定义模块的加载机制</p>\n<p>使用 require () 加载自定义模块时，必须指定以 ./ 或 …/ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 …/  这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</p>\n<p><span class=\"grey\">同时，在使用 require () 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件</span></p>\n<ol>\n<li>按照确切的文件名进行加载</li>\n<li>补全 .js 扩展名进行加载</li>\n<li>补全 .json 扩展名进行加载</li>\n<li>补全 .node 扩展名进行加载</li>\n<li>加载失败，终端报错</li>\n</ol>\n<p>第三方模块的加载机制</p>\n<p>如果传递给 require () 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘…/’ 开头，则 Node.js 会从当前模块的父 目录开始，尝试从 /node_modules 文件夹中加载第三方模块。</p>\n<p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p>\n<p><span class=\"grey\">例如，假设在’C:\\Users\\itheima\\project\\foo.js’文件里调用了 require (‘tools’)，则 Node.js 会按以下顺序查找</span></p>\n<ol>\n<li>C:\\Users\\itheima\\project\\node_modules\\tools</li>\n<li>C:\\Users\\itheima\\node_modules\\tools</li>\n<li>C:\\Users\\node_modules\\tools</li>\n<li>C:\\node_modules\\tools</li>\n</ol>\n<h2 id=\"模块作用域\"><a class=\"markdownIt-Anchor\" href=\"#模块作用域\">#</a> 模块作用域</h2>\n<p><ins>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</ins></p>\n<p><ins>模块作用域的好处 防止了全局变量污染的问题</ins></p>\n<h3 id=\"向外共享模块作用域中的成员\"><a class=\"markdownIt-Anchor\" href=\"#向外共享模块作用域中的成员\">#</a> 向外共享模块作用域中的成员</h3>\n<p><span class=\"label info\">module.exports 对象</span></p>\n<p>将模块内的成员共享出去，供外界使用。 外界用 require () 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</p>\n<p><span class=\"label danger\">注意</span> 使用 require () 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准</p>\n<p><span class=\"label info\">exports 对象</span></p>\n<p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况 下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 <ins>module.exports 指向的对象为准</ins></p>\n<p><span class=\"label danger\">注意</span></p>\n<p>时刻谨记，require () 模块时，<ins>得到的永远是 module.exports 指向的对象</ins>：</p>\n<p>为了防止混乱，<ins>建议大家不要</ins>在同一个模块中同时使用 exports 和 module.exports</p>\n<h1 id=\"npm与包\"><a class=\"markdownIt-Anchor\" href=\"#npm与包\">#</a> npm 与包</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token comment\">// 包的完整名称 通过 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install moment@<span class=\"token number\">2.22</span><span class=\"token number\">.2</span>  <span class=\"token comment\">//@ 符号指定具体的版本</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm uninstall moment <span class=\"token comment\">// 卸载指定的包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>npm install <span class=\"token comment\">// 一次性安装所有的依赖包</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>npm i 包名 <span class=\"token operator\">-</span>g  <span class=\"token comment\">//-g 全局安装</span></pre></td></tr></table></figure><p>初次装包完成后，在项目文件夹下多一个叫做 <ins>node_modules</ins> 的文件夹和 <ins>package-lock.json</ins> 的配置文件。</p>\n<p><span class=\"label danger\">其中</span></p>\n<p>node_modules 文件夹用来存放所有已安装到项目中的包。require () 导入第三方包时，就是从这个目录中查找并加载包。</p>\n<p>package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。</p>\n<h2 id=\"包的语义化版本规范与配置文件\"><a class=\"markdownIt-Anchor\" href=\"#包的语义化版本规范与配置文件\">#</a> 包的语义化版本规范与配置文件</h2>\n<p><span class=\"grey\">包的版本号是以 “点分十进制” 形式进行定义的，总共有三位数字，例如 2.24.0 其中每一位数字所代表的的含义如下</span></p>\n<ul>\n<li>第 1 位数字：大版本</li>\n<li>第 2 位数字：功能版本</li>\n<li>第 3 位数字：Bug 修复版本</li>\n</ul>\n<p>版本号提升的<ins>规则</ins>：只要前面的版本号增长了，则后面的版本号归零。</p>\n<p>在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码。</p>\n<p>注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 <ins>.gitignore</ins> 忽略文件中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm init <span class=\"token operator\">-</span>y <span class=\"token comment\">// 快速创建 package.json 这个包管理配置文件</span></pre></td></tr></table></figure><p>运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中</p>\n<h2 id=\"规范的包结构与开发属于自己的包\"><a class=\"markdownIt-Anchor\" href=\"#规范的包结构与开发属于自己的包\">#</a> 规范的包结构与开发属于自己的包</h2>\n<p><span class=\"grey\">一个规范的包，它的组成结构，必须符合以下 3 点要求</span></p>\n<ol>\n<li>包必须以单独的目录而存在</li>\n<li>包的顶级目录下要必须包含 package.json 这个包管理配置文件</li>\n<li>package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口。</li>\n</ol>\n<p><span class=\"grey\">初始化包的基本结构</span></p>\n<ol>\n<li>新建 itheima-tools 文件夹，作为包的根目录</li>\n<li>在 itheima-tools 文件夹中，新建如下三个文件：</li>\n</ol>\n<ul>\n<li>package.json （包管理配置文件）</li>\n<li>index.js （包的入口文件）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> （包的说明文档）</li>\n</ul>\n<ol start=\"3\">\n<li>初始化 package.json</li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>index.js 中定义方法</li>\n<li>补充 README.md 说明文档</li>\n</ol>\n<h3 id=\"发布包\"><a class=\"markdownIt-Anchor\" href=\"#发布包\">#</a> 发布包</h3>\n<ol>\n<li>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tLw==\">https://www.npmjs.com/</span> 网站</li>\n<li>可以在终端中执行 npm login 命令依次输入用户名、密码、邮箱后，即可登录成功。</li>\n<li>将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能雷同）。</li>\n<li>运行 npm unpublish 包名 --force 命令，即可从 npm 删除已发布的包。</li>\n</ol>\n",
            "tags": [
                "Node.js"
            ]
        }
    ]
}